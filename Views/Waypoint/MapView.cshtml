@using Book.App.ViewModels
@model BookViewModel

@{
    ViewData["Title"] = "Map View";
}

<header class="glassmorphism p-3 rounded">
    <h2>
        Map View of
        <strong class="text-primary">@Model.TourModel.Name</strong>
    </h2>
    <small>Big adventure is waiting! </small>
</header>

<div class="glassmorphism p-3 rounded mt-3">
    @await Component.InvokeAsync("TourNav", new { tourId = Model.TourModel.Id })
</div>

<div class="glassmorphism rounded p-3 mt-3">
    <partial name="_WaypointsTourPartial" model="@Model.TourModel.Waypoints" />

    <div class="d-flex justify-content-between mt-1">
        <strong class="text-secondary">Distance: @Math.Round(Model.Distance, 3) km</strong>
        <strong id="passed" class="text-secondary">
            Passed @(Math.Round(Model.Distance * Model.PercentOfTime, 3)) km
        </strong>
    </div>
    <partial name="_TourStatusPartial" model="@Model" />
</div>

<div id="map" class="glassmorphism mt-3 p-3"></div>

<div class="glassmorphism mt-3 p-3 justify-content-center" style="display: none;" id="earth"></div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/d3-geo@3/+esm"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" using Book.App.ViewModels;
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script src="https://cdn.maptiler.com/maptiler-sdk-js/v1.2.0/maptiler-sdk.umd.js"></script>
    <script src="https://cdn.maptiler.com/leaflet-maptilersdk/v2.0.0/leaflet-maptilersdk.js"></script>

    <script src="~/js/userMap.js" type="module" defer></script>
    @{
        var tourLat = Model.NextWaypointData != null ? Model.NextWaypointData.TourLat : 0;
        var tourLon = Model.NextWaypointData != null ? Model.NextWaypointData.TourLon : 0;
    }
    <script type="module">
        import { UserMap } from '/js/userMap.js';
        import { Waypoint } from '/js/Waypoint.js';
        import { Map } from '/js/map.js';
        import { updateTourData } from '/js/tour/updateTourData.js';

        import { setupGlob, EarthOptions } from '/js/three/setupGlob.js';
        $(document).ready(function () {
            const model = @Html.Raw(Json.Serialize(Model.TourModel));
            const tourLat = @tourLat;
            const tourLon = @tourLon;
            let isTourEnded = new Date(model.endDate) < new Date();
            let isTourStarted = new Date(model.startDate) < new Date();
            let earthScene

            function glob(waypoints) {
                const distance = @Model.Distance;

                if (distance > 70) {
                    console.log('Glob');
                    $('#earth').css('display', 'flex');
                    const paddingX = +$('#earth').css('padding-left').replace('px', '');
                    const earthOptions = new EarthOptions(window.innerWidth - $('#earth').offset().left * 2 - (paddingX * 2), $('#map').height(), 7);
                    const earth = setupGlob(waypoints, earthOptions).then(earth => {
                        earthScene = earth;
                        window.addEventListener('resize', () => {
                            const paddingX = +$('#earth').css('padding-left').replace('px', '');
                            earth.setWidth(window.innerWidth - $('#earth').offset().left * 2 - (paddingX * 2))
                        });
                    });
                }
            }

            if (model.waypoints.$values.length > 0) {
                const userMap = new UserMap(model.waypoints.$values, tourLat, tourLon);
                if (!isTourEnded) setInterval(() => updateTourData(userMap, earthScene, model.waypoints.$values, model.startDate, model.endDate, isTourStarted, isTourEnded), 1000);
                else tourEnded();
                const latLngs = model.waypoints.$values.map(w => L.latLng(w.latitude, w.longitude));
                const bounds = L.latLngBounds(latLngs);
                userMap.map.fitBounds(bounds, { padding: [ 50, 50 ] });
                glob(userMap.waypoints)
            }
        });
    </script>
}
