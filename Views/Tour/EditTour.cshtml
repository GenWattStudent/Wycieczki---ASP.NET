@model TourModel

@{
    ViewData["Title"] = "Edit";
}

<header class="glassmorphism p-3 rounded">
    <h2>Edit - <span class="text-primary">@Model.Name</span></h2>
</header>

<div class="glassmorphism p-3 mt-3 rounded">
    @await Component.InvokeAsync("TourNav", new { tourId = Model.Id, isEdit = true })
</div>

<div>
    @using (Html.BeginForm("EditTour", "Tour", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        <div class="glassmorphism p-3 rounded mt-3">
            <partial name="_TourFormPartial" model="Model" />

            <div class="form-check form-switch ml-4 mt-2 align-items-center d-flex">
                @Html.CheckBoxFor(m => m.IsVisible, new
                    {
                        @class = "form-check-input",
                        type = "checkbox",
                        name = "isVisible",
                        id = "isVisible"
                    })
                <label class="form-check-label d-flex aling-items-center" for="isVisible">Is visible
                    <ion-icon class="bg-primary text-light p-1 rounded ml-2" data-toggle="tooltip"
                        title="@(!Model.IsVisible ? "This trip won't be visible for users" : "This trip is visible for users")"
                        name="help-outline"></ion-icon>
                </label>
            </div>

        </div>

        @Html.Hidden("Id", Model.Id, new { id = "Id" })

        <div class="d-flex flex-column">
            <input class="btn btn-primary mt-3" type="submit" value="Submit">
        </div>
    }
</div>

@section Scripts {
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/js/dateGreaterThan.js"></script>
}
