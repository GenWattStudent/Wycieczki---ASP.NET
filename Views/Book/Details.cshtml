@using Book.App.ViewModels
@model BookViewModel

@{
    ViewBag.Title = $"Tour - {Model.TourModel.Name}";
    var sliderData = new ImageSliderViewModel
            {
                Images = Model.TourModel.Images,
                SliderId = Model.TourModel.Id,
            };
}


<div class="glassmorphism p-3 rounded">
    @await Component.InvokeAsync("TourNav", new { tourId = Model.TourModel.Id })
</div>

<section class="card glassmorphism mt-3">
    <div class="card-header">

        @if (sliderData.Images.Count > 0)
        {
            <div class="w-100">
                <partial name="_ImageSliderPartial" model="@sliderData" />
            </div>
        }

        <h4 class="card-title text-primary mt-4">
            @Model.TourModel.Name
            <partial name="_TourActivityPartial" model="@Model.TourModel" />
        </h4>
    </div>

    <div class="card-body">
        <div>
            <p class="card-text">@Model.TourModel.Description</p>

            <partial name="_TourDetailsPartial" model="@Model.TourModel" />

            <div>
                <partial name="_WaypointsTourPartial" model="@Model.TourModel.Waypoints" />

                <div class="d-flex justify-content-between mt-1">
                    <strong class="text-secondary">Distance: @Math.Round(Model.Distance, 3) km</strong>
                    <strong id="passed" class="text-secondary">
                        Passed @(Math.Round(Model.Distance * Model.PercentOfTime, 3)) km
                    </strong>
                </div>
                <partial name="_TourStatusPartial" model="@Model" />
            </div>
        </div>

        @if (Model.TourModel.StartDate > DateTime.Now)
        {
            <form asp-action="Delete" asp-controller="Book" method="post" class="mt-2">
                <input type="hidden" name="id" value="@Model.TourModel.Id" />
                <button class="btn btn-danger">
                    Cancel tour
                </button>
            </form>
        }
</section>

<div class="modal fade" id="TourEnded" tabindex="-1" role="dialog" aria-labelledby="TourEndedLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="TourEndedLabel">This is over :(</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                The tour <strong class="text-primary">(@Model.TourModel.Name)</strong> has finished.
            </div>
            <div class="modal-footer">
                <a class="btn btn-danger" asp-action="Tours" asp-controller="Tour">Check other tours</a>
                <a class="btn btn-secondary" data-dismiss="modal">Ok</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="module">
        import { Waypoint } from '/js/Waypoint.js';
        import { updateTourData } from '/js/tour/updateTourData.js';

        $(document).ready(function () {
            const model = @Html.Raw(Json.Serialize(Model.TourModel));
            let isTourEnded = new Date(model.endDate) < new Date();
            let isTourStarted = new Date(model.startDate) < new Date();

            if (model.waypoints.$values.length > 0) {
                if (!isTourEnded) setInterval(() => updateTourData(null, null, model.waypoints.$values, model.startDate, model.endDate, isTourStarted, isTourEnded), 1000);
                else tourEnded();
            }
        });
    </script>
}
