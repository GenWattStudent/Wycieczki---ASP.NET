@using Book.App.ViewModels
@model BookViewModel

@{
    ViewBag.Title = $"Tour - {Model.TourModel.Name}";
    var sliderData = new ImageSliderViewModel
            {
                Images = Model.TourModel.Images,
                SliderId = Model.TourModel.Id,
            };
}

<section class="card glassmorphism">
    <div class="card-header">

        @if (sliderData.Images.Count > 0)
        {
            <div class="w-100">
                <partial name="_ImageSliderPartial" model="@sliderData" />
            </div>
        }

        <h4 class="card-title text-primary mt-4">
            @Model.TourModel.Name
            <partial name="_TourActivityPartial" model="@Model.TourModel" />
        </h4>
    </div>

    <div class="card-body">
        <div class="">
            <p class="card-text">@Model.TourModel.Description</p>

            <partial name="_TourDetailsPartial" model="@Model.TourModel" />

            <div>
                <partial name="_WaypointsTourPartial" model="@Model.TourModel.Waypoints" />

                <div class="d-flex justify-content-between mt-1">
                    <strong class="text-secondary">Distance: @Math.Round(Model.Distance, 3) km</strong>
                    <strong id="passed" class="text-secondary">
                        Passed @(Math.Round(Model.Distance * Model.PercentOfTime, 3)) km
                    </strong>
                </div>
                <partial name="_TourStatusPartial" model="@Model" />
            </div>
        </div>

        @if (Model.TourModel.StartDate > DateTime.Now)
        {
            <form asp-action="Delete" asp-controller="Book" method="post" class="mt-2">
                <input type="hidden" name="id" value="@Model.TourModel.Id" />
                <button class="btn btn-danger">
                    Cancel tour
                </button>
            </form>
        }
</section>

<div class="modal fade" id="TourEnded" tabindex="-1" role="dialog" aria-labelledby="TourEndedLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="TourEndedLabel">This is over :(</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                The tour <strong class="text-primary">(@Model.TourModel.Name)</strong> has finished.
            </div>
            <div class="modal-footer">
                <a class="btn btn-danger" asp-action="Tours" asp-controller="Tour">Check other tours</a>
                <a class="btn btn-secondary" data-dismiss="modal">Ok</a>
            </div>
        </div>
    </div>
</div>

<div id="map" class="glassmorphism mt-3 p-3"></div>

<div class="glassmorphism mt-3 p-3" style="display: none;" id="earth"></div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/d3-geo@3/+esm"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script src="https://cdn.maptiler.com/maptiler-sdk-js/v1.2.0/maptiler-sdk.umd.js"></script>
    <script src="https://cdn.maptiler.com/leaflet-maptilersdk/v2.0.0/leaflet-maptilersdk.js"></script>

    <script src="~/js/userMap.js" type="module"></script>
    @{
        var tourLat = Model.NextWaypointData != null ? Model.NextWaypointData.TourLat : 0;
        var tourLon = Model.NextWaypointData != null ? Model.NextWaypointData.TourLon : 0;
    }
    <script type="module">
        import { UserMap } from '/js/userMap.js';
        import { TourData } from '/js/tourData.js';
        import { Waypoint } from '/js/Waypoint.js';
        import { Map } from '/js/map.js';
        import { setupGlob, EarthOptions } from '/js/three/setupGlob.js';

        $(document).ready(function () {
            const model = @Html.Raw(Json.Serialize(Model.TourModel));
            const tourLat = @tourLat;
            const tourLon = @tourLon;
            let isTourEnded = new Date(model.endDate) < new Date();
            let isTourStarted = new Date(model.startDate) < new Date();
            let earthScene

            function reloadWhenTourStarts() {
                if (!isTourStarted && new Date(model.startDate) < new Date()) {
                    location.reload();
                }
            }

            function tourEnded() {
                if (isTourEnded || new Date(model.endDate) < new Date()) {
                    $('#TourEnded').modal("show");
                }
            }

            function updateTourData(userMap) {
                reloadWhenTourStarts()
                tourEnded()

                const tourData = new TourData(model.waypoints.$values, model.startDate, model.endDate);
                const completed = tourData.calculatePercentComplete();
                const data = tourData.calculateDistanceToNextWaypoint(completed);

                $('#passed').text(`Passed ${tourData.calculatePassedDistance(completed).toFixed(3)} km`);
                $('#completed').text(`${(completed * 100).toFixed(1)}% completed`);
                $('#distanceToNextWaypoint').html(`${data.distance.toFixed(3)} km to <strong class="text-primary">${data.nextWaypoint.name}</strong>`);

                userMap.updateTourIndicator(data.tourLat, data.tourLon);
                if (earthScene) {
                    earthScene.updateTourLatLong(data.tourLat, data.tourLon, data.nextWaypoint)
                }
            }

            function glob(waypoints) {
                const distance = @Model.Distance;

                if (distance > 70) {
                    $('#earth').css('display', 'block');
                    const paddingX = +$('#earth').css('padding-left').replace('px', '');
                    console.log(paddingX)
                    const earthOptions = new EarthOptions(window.innerWidth - $('#earth').offset().left * 2 - (paddingX * 2), $('#map').height(), 7);
                    const earth = setupGlob(waypoints, earthOptions).then(earth => {
                        earthScene = earth;
                        window.addEventListener('resize', () => {
                            const paddingX = +$('#earth').css('padding-left').replace('px', '');
                            earth.setWidth(window.innerWidth - $('#earth').offset().left * 2 - (paddingX * 2))
                        });
                    });
                }
            }

            if (model.waypoints.$values.length > 0) {
                const userMap = new UserMap(model.waypoints.$values, tourLat, tourLon);
                if (!isTourEnded) setInterval(() => updateTourData(userMap), 1000);
                else tourEnded();
                console.log(userMap.waypoints)
                const latLngs = model.waypoints.$values.map(w => L.latLng(w.latitude, w.longitude));
                const bounds = L.latLngBounds(latLngs);
                userMap.map.fitBounds(bounds, { padding: [ 50, 50 ] });
                glob(userMap.waypoints)
            }
        });
    </script>
}
